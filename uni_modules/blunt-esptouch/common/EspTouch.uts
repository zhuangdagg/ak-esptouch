
import { UDPSocket } from '../utssdk/app-android';
import { UDPData } from '../utssdk/app-android/udp';
import { 
	ErrorConstant, 
	GenSpecBytes, 
	Crc8Update,
	SplitUint8To2Bytes,
	Combine2BytesToOne,
	CovertByte2Uint8,
	Combine2bytesToU16,
	String2Bytes
} from './util.uts'
export function useEspTouch() {
	return 'esp-touch'
}

export interface EsptouchTaskOptions {
	socketClient: UDPSocket
	ssid: string
	password: string
	bassid: string
	onSuccess: Function
	onError: Function
}


export class EsptouchTask {
	mApSsid;
	mApPassword;
	mApBssid;
	mtargetHostName = "255.255.255.255";
	mtargetPort = 7001;
	mListenPort = 18266;
	mTimeoutGuideCodeMillisecond = 2e3;
	mTimeoutDataCodeMillisecond = 4e3;
	mTimeoutTotalCodeMillisecond = this.mTimeoutGuideCodeMillisecond + this.mTimeoutDataCodeMillisecond;
	mWaitUdpSendingMillisecond = 45e3;
	mIntervalGuideCodeMillisecond = 8;
	mIntervalDataCodeMillisecond = 8;
	mIsInterrupt = false;
	mIsExecuted = false;
	mSetTimeoutProgress = 0;
	generator;
	socketClient: UDPSocket;
	resultData;
	onSuccess = ()=>{}
	onError = ()=>{}
	
	constructor(options: EsptouchTaskOptions){
	  this.mApSsid = options.ssid? options.ssid:'';
	  this.mApPassword = options.password? options.password:'';
	  this.mApBssid = options.bssid?options.bssid:'';
	  this.onSuccess = options.onSuccess?options.onSuccess:()=>{};
	  this.onError = options.onError?options.onError:()=>{};
	  this.generator = new EsptouchGenerator(this.mApSsid, this.mApBssid, this.mApPassword, options.ip);
		if(!options.socketClient) {
			throw new Error('options.socketClient must be define!')
		}
	  this.socketClient = options.socketClient
	  this.socketClient.handleMsg(this);
	}
	
	receiveMsg(res: UDPData){
	  console.log('receive from',res.remoteInfo.address,res.msg);
	  let msg = new Uint8Array(res.msg);
	  if(msg.length == 11){
	    let oneByte = msg[0];
	    if(oneByte == (9+this.mApSsid.length+this.mApPassword.length)){
	      this.interrupt();
	      let mac = msg.slice(1,7);
	      let macArr = [];
	      for(let i in mac){
	        let hex = mac[i].toString(16);
	        macArr[i] = hex.length==2?hex:'0'.concat(hex);
	      }
	      this.resultData = {
	        mac: macArr.join(':'),
	        ip: msg.slice(7).join('.')
	      };
	      // console.log('配网成功',this.resultData);
	      this.onSuccess(this.getResult());
	    }
	  }
	}
	
	interrupt(){
	  clearTimeout(this.mSetTimeoutProgress);
	  this.mIsInterrupt = true;
	  this.socketClient.getClient().close();
	}
	getResult(){
	  return this.resultData;
	}
	start(){
	  if(this.mIsExecuted){
	    ErrorConstant(this.ErrorCode || (this.ErrorCode = {}));
	    return this.onError(_this.ErrorCode.getErrorObject(this.ErrorCode.SMARTCONFIG_ERROR_ALREADY_EXECUTED))
	  }
	  this.mIsExecuted = true;
	  if("android" !== wx.getSystemInfoSync().platform){
	    this.startInPromise()
	  }else{
	    this.startInNoPromise()
	  }
	}
	async startInPromise(){
	  let GcData = this.generator.getGcBytes();
	  let DcData = this.generator.getDcBytes();
	  let startTime = (new Date()).getTime();
	  let currentTime = startTime;
	  let lastTime = currentTime-this.mTimeoutTotalCodeMillisecond;
	  let index = 0;
	  logger.info('start smartconfig in promise');
	  while(!this.mIsInterrupt){
	    if(currentTime-lastTime >= this.mTimeoutTotalCodeMillisecond){
	      logger.info("send gc code");
	      while(!this.mIsInterrupt && (new Date()).getTime() - currentTime < this.mTimeoutGuideCodeMillisecond){
	        await this.socketClient.sendData(GcData,this.mtargetHostName, this.mtargetPort, 0, GcData.length,this.mIntervalGuideCodeMillisecond)
	        // check whether the udp is send enough time
	        if((new Date()).getTime() - startTime > this.mWaitUdpSendingMillisecond){
	          break;
	        }
	      }
	      lastTime = currentTime;
	    }else{
	      await this.socketClient.sendData(DcData, this.mtargetHostName, this.mtargetPort, index, 3, this.mIntervalDataCodeMillisecond);
	      index = (index + 3) % DcData.length;
	    }
	    currentTime = (new Date()).getTime();
	    // check whether the udp is send enough time
	    if( currentTime - startTime > this.mWaitUdpSendingMillisecond){
	      ErrorConstant(this.ErrorCode || (this.ErrorCode = {}));
	      this.onError(this.ErrorCode.getErrorObject(this.ErrorCode.SMARTCONFIG_ERROR_TIMEOUT));
	      this.interrupt();
	      break;
	    }
	  }
	  return this.getResult();
	}
	async startInNoPromise(){
	  let _this = this;
	  let GcData = this.generator.getGcBytes();
	  let DcData = this.generator.getDcBytes();
	  let startTime = (new Date()).getTime();
	  let lastTime = startTime-this.mTimeoutTotalCodeMillisecond;
	  let index = 0;
	  logger.info('start smartconfig in no promise');
	  function a(){
	    if (!_this.mIsInterrupt && new Date().getTime() - startTime < _this.mTimeoutGuideCodeMillisecond){
	      return _this.socketClient.sendDataSideBySide(GcData, _this.mtargetHostName, _this.mtargetPort, 0, GcData.length, _this.mIntervalGuideCodeMillisecond, a);
	    }
	    c();
	  }
	  function c(){
	    if (_this.mIsInterrupt){
	      logger.debug('progress interrupted');
	    }else{
	      if(startTime - lastTime >= _this.mTimeoutTotalCodeMillisecond){
	        logger.info("send gc code");
	        a();
	        lastTime = startTime;
	      }else{
	        _this.socketClient.sendDataSideBySide(DcData, _this.mtargetHostName, _this.mtargetPort, index, 3, _this.mIntervalDataCodeMillisecond, c);
	        index = (index + 3) % DcData.length;
	      }
	      startTime = (new Date()).getTime();
	    }
	  }
	  c();
	  clearTimeout(this.mSetTimeoutProgress);
	  this.mSetTimeoutProgress = setTimeout(function(){
	    ErrorConstant(this.ErrorCode || (this.ErrorCode = {}));
	    _this.onError(this.ErrorCode.getErrorObject(this.ErrorCode.SMARTCONFIG_ERROR_TIMEOUT));
	    _this.interrupt()
	  }, _this.mWaitUdpSendingMillisecond);
	}
}