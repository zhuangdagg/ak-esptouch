

export function ErrorConstant(e: object) {
	e.SMARTCONFIG_ERROR_ALREADY_EXECUTED = 'SMARTCONFIG_ERROR_ALREADY_EXECUTED';
	e.SMARTCONFIG_ERROR_TIMEOUT = 'SMARTCONFIG_ERROR_TIMEOUT';
	e.SMART_CONFIG_ERROR = 'SMART_CONFIG_ERROR';
	var msg = {};
	msg[e.SMARTCONFIG_ERROR_ALREADY_EXECUTED] = '已经启动了一个配网流程',
	msg[e.SMARTCONFIG_ERROR_TIMEOUT] = 'SmartConfig配网超时',
	msg[e.SMART_CONFIG_ERROR] = 'SmartConfig配网失败';
	e.msg = msg;
	e.getErrorObject = (c)=>{
	  return {code:c,errMsg:msg[c]};
	}
}

export function GenSpecBytes(num: number) {
	return new Array(num).fill(1)
}

export function Crc8Update(buffer) {
  const CRC_POLYNOM = 0x8c
  const CRC_INITIAL = 0x00
  var crcTable = [];
  for (let dividend = 0;dividend< 256;dividend++){
    let remainder = dividend
    for (let bit = 0; bit < 8; bit++){
      if ((remainder & 0x01) != 0){
        remainder = (remainder >> 1) ^ CRC_POLYNOM
      }else{
        remainder >>= 1
      }
    }
    crcTable[dividend] = remainder
  }
  let value = CRC_INITIAL
  for( let i = 0; i < buffer.length; i++ ){
    let v = (typeof buffer == "string")? buffer.charCodeAt(i): buffer[i];
    let data = v ^ value
    value = crcTable[data&0xff]^(value << 8)
  }
  return (value&0xff);
}

export const SplitUint8To2Bytes = char =>{
  return [(char & 0xff) >> 4, char & 0x0f]
}
export const Combine2BytesToOne = (high, low) => {
  return high<<4 | low
}
export const CovertByte2Uint8 = b => {
  return (b & 0xff)
}
export const Combine2bytesToU16 = (h, l) => {
  let highU8 = CovertByte2Uint8(h)
	let lowU8 = CovertByte2Uint8(l)
	return highU8<<8 | lowU8
}
export const String2Bytes = str => {
  let arr = [];
  for(let i = 0; i < str.length; i++){
    arr[i] = str.charCodeAt(i);
  }
  return arr;
}
export function Sleep(time:number) {
  return new Promise((resolver) => {setTimeout(resolver, time)})
}